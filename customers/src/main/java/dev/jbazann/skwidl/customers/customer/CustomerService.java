package dev.jbazann.skwidl.customers.customer;

import dev.jbazann.skwidl.commons.exceptions.DistributedTransactionException;
import dev.jbazann.skwidl.customers.customer.dto.CustomerDTO;
import dev.jbazann.skwidl.customers.customer.dto.EditableFieldsDTO;
import dev.jbazann.skwidl.customers.customer.dto.NewCustomerDTO;
import dev.jbazann.skwidl.customers.customer.exceptions.InvalidCustomerException;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;


@Service
@Validated
public class CustomerService {

    private final CustomerService self;
    private final Customer.DefaultValues defaults;
    private final CustomerRepository customerRepository;
    private final SiteServiceClient siteService;
    private final UserServiceClient userService;

    public CustomerService(CustomerRepository customerRepository, @Lazy CustomerService self, SiteServiceClient siteService, UserServiceClient userService, Customer.DefaultValues defaults) {
        this.customerRepository = customerRepository;
        this.self = self;
        this.siteService = siteService;
        this.userService = userService;
        this.defaults = defaults;
    }

    /**
     * Customer ID provider. Values generated by this method can be
     * expected to be unique and valid for registering new Customer instances.
     * @return a unique customer entity identifier.
     */
    public UUID generateCustomerId() {
        UUID id;
        // TODO this is still terrible
        // be ffr though it's never going to collide, this is optimal
        while (customerRepository.existsById(id = UUID.randomUUID()));
        return id;
    }

    public @NotNull @Valid Customer newCustomer(@NotNull @Valid NewCustomerDTO input) {
        CustomerDTO dto = input.toDto();
        dto.id(self.generateCustomerId());
        dto.maxDebt(defaults.maxDebt());
        dto.maxActiveSites(defaults.maxActiveSites());
        dto.enabledSites(dto.enabledSites() == null ? new ArrayList<>() : dto.enabledSites());
        dto.enabledUsers(dto.enabledUsers() == null ? new ArrayList<>() : dto.enabledUsers());
        dto.pendingSites(0);
        @Valid Customer customer = dto.toEntity();
        return customerRepository.save(customer);
    }

    /**
     * If the resulting instance from using the passed {@link EditableFieldsDTO}'s non-null fields
     * in place for the corresponding fields in the {@link Customer} with matching {@code customerId} is valid, overwrite the current
     * instance with the new one.
     * @param customerId a vaild customer ID.
     * @param fields an instance with any or all fields containing non-null values.
     *               If all fields are null,
     *               no changes will be made, but all the database operations will be performed as if they were.
     */
    public void updateCustomer(@NotNull UUID customerId, @NotNull EditableFieldsDTO fields) {
        Customer customer = fetchCustomer(customerId);
        fields.update(customer);
        customerRepository.save(customer);
    }

    /**
     * Find a list of up to 5 customers matching the provided example.
     * This was made this way for simplicity's sake, only intended for queries
     * expected to match with a single customer.
     * @param customer an example customer with null fields, except for those intended to be matched against.
     * @return a size-limited list of matching results.
     */
    public @NotNull List<@NotNull @Valid Customer> findCustomersByExample(@NotNull Customer customer) { //TODO this should probably receive a DTO
        return customerRepository.findAll(Example.of(customer), Pageable.ofSize(5)).toList();
    }

    /**
     * Add allowed user if it's not already present. No user ID validation will be performed (so
     * invalid references may exist)
     * @param customerId a valid customer ID.
     * @param userId a user ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void addAllowedUser(@NotNull UUID customerId, @NotNull UUID userId) {
        // trigger distributed transaction
        CompletableFuture<Void> externalTransaction = CompletableFuture.runAsync(
                () -> userService.addAllowedUser(customerId, userId)
        );
        // perform local operations
        Customer customer = fetchCustomer(customerId);
        customer.addAllowedUser(userId);

        // await success from user service
        try{
            externalTransaction.join();
        } catch (CancellationException | CompletionException e) {
            throw new DistributedTransactionException("User service failed.",e);
        }

        customerRepository.save(customer);
    }

    /**
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     * @return whether the site was registered as active by the customer instance.
     */
    @Transactional
    public boolean activateSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        Customer customer = fetchCustomer(customerId);
        if(customer.activeSites().size() < customer.maxActiveSites()) {
            customer.addActiveSite(siteId);
            customerRepository.save(customer);
            return true;
        }
        return false;
    }

    /**
     * Same as {@link CustomerService#activateSite(UUID, UUID)}, but assumes
     * the site was previously registered as pending for the given customer, so it updates
     * the counter accordingly.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void activatePendingSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        Customer customer = fetchCustomer(customerId);
        if (customer.activeSites().size() < customer.maxActiveSites()) {
            customer.addActiveSite(siteId);
            if (customer.pendingSites() < 1); // TODO log, customer unaware of pending site
            customer.removePendingSite();
            customerRepository.save(customer);
        }
    }

    /**
     * Remove the given site from {@link Customer#activeSites()}.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void finishSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        Customer customer = fetchCustomer(customerId);
        if(!customer.activeSites().contains(siteId)) {
            // TODO log, customer unaware of active site
            return;
        }
        customer.removeActiveSite(siteId);
        customerRepository.save(customer);
        // the customer may now activate more sites
        // TODO concurrency, retry
        if(customer.pendingSites() > 0) siteService.signalActivatePendingSites(customer.id());
    }

    /**
     * Add one to {@link Customer#pendingSites()}
     * @param customerId a valid customer ID.
     */
    public void addPendingSite(@NotNull UUID customerId) {
        Customer customer = fetchCustomer(customerId);
        customerRepository.save(customer.countPendingSite());
    }

    /**
     * Like {@link CustomerService#finishSite(UUID, UUID)}, remove the given site from
     * {@link Customer#activeSites()}, but also increment {@link Customer#pendingSites()}.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    public void deactivateSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        Customer customer = fetchCustomer(customerId);
        if(!customer.activeSites().contains(siteId)) {
            // TODO log, customer unaware of active site
            return;
        }
        customer.removeActiveSite(siteId).countPendingSite();
        customerRepository.save(customer);
    }

    private Customer fetchCustomer(UUID customerId) {
        return customerRepository.findById(customerId).orElseThrow(
                () -> new InvalidCustomerException("Customer "+ customerId +" not found.")
        );
    }

}
